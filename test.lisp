(in-package :maxpc.test)

(defun test-end ()
  (assert (parse "" (%and (?end) (%value t))))
  (assert (null (parse "f" (%and (?end) (%value t))))))

(defun test-result ()
  (assert (eq (parse "" (%value :foo)) :foo)))

(defun test-fail ()
  (assert (null (parse "a" (%and (?fail) (%value t)))))
  (handler-case (parse "a" (?fail (error (make-instance 'parse-error))))
    (parse-error (e))
    (:no-error (e) (error "=FAIL body was not run.")))
  (assert (parse "a" (%and (%maybe (?fail)) (%value t))))
  (assert (null (parse "" (%maybe (=element))))))

(defun test-atom ()
  (assert (eq #\f (parse "foo" (=element))))
  (assert (null (parse "" (=element)))))

(defun test-satisfies ()
  (assert (parse "foo" (%and (?satisfies 'alpha-char-p)
                             (%value t))))
  (assert (null (parse "42" (%and (?satisfies 'alpha-char-p)
                                  (%value t)))))
  (assert (parse "foo" (%and (?eq #\f) (%value t)))))

(defun test-subseq ()
  (assert (equal (parse "123" (=subseq (?satisfies 'digit-char-p))) "1"))
  (assert (equal (parse '(42 43) (=subseq (?satisfies 'numberp))) '(42)))
  (assert (null (parse "foo" (=subseq (?satisfies 'digit-char-p))))))

(defun test-list ()
  (assert (equal (parse "fo" (=list (=element) (=element) (?end)))
                 '(#\f #\o nil)))
  (assert (null (parse "foo" (=list (=element) (=element) (?end)))))
  (assert (parse "fo" (=list (?list (?eq #\f) (=element)) (?end)))))

(defun test-any ()
  (assert (parse "" (=list (%any (=element)))))
  (assert (equal (parse "foo123" (=subseq (%any (?satisfies 'alpha-char-p))))
                 "foo"))
  (assert (null (parse "" (=list (%some (=element))))))
  (assert (equal (parse "foo" (=list (%some (=element)) (?end)))
                 '((#\f #\o #\o) nil))))

(defun test-or ()
  (let ((fo (%or (?eq #\f) (?eq #\o))))
    (assert (parse "fo" (=list fo fo (?end))))
    (assert (null (parse "x" fo)))
    (assert (null (parse "" fo)))))

(defun test-and ()
  (let ((d (%and (?satisfies 'alphanumericp) (?satisfies 'digit-char-p))))
    (assert (parse "12" (=list d d (?end))))
    (assert (null (parse "f" (=list d (?end)))))
    (assert (null (parse "x1" (=list d d))))))

(defun test-diff ()
  (let ((anp/c (%diff (?satisfies 'alphanumericp) (?eq #\c))))
    (assert (parse "fo" (=list anp/c anp/c (?end))))
    (assert (null (parse "c" (=list anp/c))))
    (assert (null (parse "ac" (=list anp/c anp/c)))))
  (assert (parse "f" (=list (?not (?end)) (?end)))))

(defun test-transform ()
  (assert (equal (parse '(16) (=list (=transform (=element) 'sqrt) (?end)))
                 '(4 nil)))
  (assert (equal (parse '(:a :b :c :d :e :f)
                        (=destructure (a b c _ &rest e) (%any (=element))
                          (append e (list c b a))))
                 '(:e :f :c :b :a)))
  (assert (equal (parse '(:a :b)
                        (=destructure (_ b) (=list (=element) (=element))))
                 :b))
  (assert (null (parse '(:a :b)
                        (=destructure (_ b) (=list (?eq :c) (=element)))))))

(defun test-interface ()
  (parse "foozakar"
         (%or (?list (?string "foo")
                     (%or (?string "bar")
                          (?fail (assert (= 3 (get-input-position))))))
              (?list (?string "fooza")
                     (%or (?string "bar")
                          (?fail (assert (= 5 (get-input-position))))))))
  (assert (eq (parse "bar"
                     (%handler-case (?fail (error "foo"))
                       (error () (%and (?string "bar")
                                       (%value :bar)))))
              :bar))
  (assert (eq (parse "bar"
                     (%restart-case
                         (%handler-case (?fail (error "foo"))
                           (error () (invoke-restart 'restart)))
                       (restart () (%value :bar))))
              :bar)))

(defun test-char ()
  (assert (parse "λ" (=list (?char #\λ) (?end))))
  (assert (parse "Λ" (=list (?char #\λ nil) (?end))))
  (assert (parse "λδ" (=list (?string "λδ") (?end))))
  (assert (parse "ΛΔ" (=list (?string "λδ" nil) (?end))))
  (assert (parse (coerce *whitespace* 'string)
                 (=list (%any (?whitespace))  (?end))))
  (assert (char= (parse (coerce (append *whitespace* '(#\a)) 'string)
                        (%skip-whitespace (=element)))
                 #\a))
  (assert (parse (format nil "~%")
                 (=list (?newline) (?end))))
  (assert (equal (parse (format nil "foo~%bar")
                        (=list (=line) (=line t) (?end)))
                 (list "foo" (format nil "bar~%") nil))))

(defun test-digit ()
  (assert (parse "f" (=list (?digit 16) (?end))))
  (assert (equal (parse "f423" (=list (=natural-number 16) (?end)))
                 '(#xf423 nil)))
  (assert (equal (parse "f423" (=list (=integer-number 16) (?end)))
                 '(#xf423 nil)))
  (assert (equal (parse "+f423" (=list (=integer-number 16) (?end)))
                 '(#xf423 nil)))
  (assert (equal (parse "-f423" (=list (=integer-number 16) (?end)))
                 '(#x-f423 nil))))


(defun run-tests ()
  (test-end)
  (test-result)
  (test-fail)
  (test-atom)
  (test-satisfies)
  (test-subseq)
  (test-list)
  (test-any)
  (test-or)
  (test-and)
  (test-diff)
  (test-transform)
  (test-char)
  (test-digit)
  (test-interface))
